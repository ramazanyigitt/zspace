@startuml ZSpace
set namespaceSeparator ::

class "zspace::core::errors::exception.dart::ServerException" {
}

"dart::core::Exception" <|-- "zspace::core::errors::exception.dart::ServerException"

class "zspace::core::errors::exception.dart::CacheException" {
}

"dart::core::Exception" <|-- "zspace::core::errors::exception.dart::CacheException"


abstract class "zspace::core::errors::failure.dart::Failure" {
  +List<dynamic> properties
  +List<Object?> props
}

class "zspace::core::errors::failure.dart::ServerFailure" {
}

class "zspace::core::errors::failure.dart::CacheFailure" {
}

class "zspace::core::errors::failure.dart::DeletedFileFailure" {
}

"zspace::core::errors::failure.dart::Failure" <|-- "zspace::core::errors::failure.dart::ServerFailure"
"zspace::core::errors::failure.dart::Failure" <|-- "zspace::core::errors::failure.dart::CacheFailure"
"zspace::core::errors::failure.dart::Failure" <|-- "zspace::core::errors::failure.dart::DeletedFileFailure"



abstract class "zspace::core::platform::network_info.dart::NetworkInfo" {
  +Future<bool> isConnected
  +void onInternetChange()
}

class "zspace::core::platform::network_info.dart::NetworkInfoImpl" {
  +InternetConnectionChecker connectionChecker
  +Future<bool> isConnected
  +void onInternetChange()
}

"zspace::core::platform::network_info.dart::NetworkInfoImpl" o-- "internet_connection_checker::internet_connection_checker.dart::InternetConnectionChecker"
"zspace::core::platform::network_info.dart::NetworkInfo" <|-- "zspace::core::platform::network_info.dart::NetworkInfoImpl"



class "zspace::core::services::validator_service.dart::ValidatorService" {
  +String? onlyNumber()
  +String? onlyDouble()
  +String? onlyText()
  +String? phoneNumber()
  +String? onlyRequired()
  +String? email()
  +String? phoneNumberWith1To12()
  +Future<String?> validateEmailWhenStop()
}
"zspace::core::services::validator_service.dart::ValidatorService" o-- "package::get_it::get_it.dart"

class "zspace::core::utils::router::app_navigator.dart::AppNavigator" {
  {static} +Future<T> push()
  {static} +Future<T> pushWithFadeIn()
  {static} +Future<T> pushWithOutAnim()
  {static} +Future<T> pushReplacement()
  {static} +Future<T> pushAndRemoveUntil()
}

class "zspace::core::utils::router::app_router.dart::AppRouter" {
  {static} -AppRouter _instance
  +TabController tabController
  +GlobalKey<NavigatorState>? mainNavigatorKey
}

"zspace::core::utils::router::app_router.dart::AppRouter" o-- "flutter::src::material::tab_controller.dart::TabController"
"zspace::core::utils::router::app_router.dart::AppRouter" o-- "flutter::src::widgets::framework.dart::GlobalKey<NavigatorState>"





class "zspace::data::models::energy_generator_model.dart::EnergyGeneratorModel" {
  +int? id
  +int? shipSpeed
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::inventory_item_model.dart::InventoryItemModel" {
  +int? id
  +int? itemId
  +int? userId
  +bool? isEquipped
  +DateTime? createdAt
  +DateTime? updatedAt
  +MarketItemModel? item
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::market_item_model.dart::MarketItemModel" {
  +int? id
  +String? name
  +int? buyPrice
  +int? sellPrice
  +int? stock
  +bool? isActive
  +bool? isSalable
  +String? description
  +String? imageUrl
  +int? levelId
  +DateTime? createdAt
  +DateTime? updatedAt
  +String? category
  +WeaponModel? weapon
  +EnergyGeneratorModel? energyGenerator
  +ShieldGeneratorModel? shieldGenerator
  +ShipModel? ship
  +LevelModel? level
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::level_model.dart::LevelModel" {
  +int? level
  +int? episodeId
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::shield_generator_model.dart::ShieldGeneratorModel" {
  +int? id
  +int? shieldAmount
  +int? absorb
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::ship_model.dart::ShipModel" {
  +int? id
  +int? armor
  +int? speed
  +int? power
  +int? shield
  +int? attack
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::user_model.dart::UserModel" {
  +int? id
  +String? userName
  +String? emailAddress
  +String? phoneNumber
  +int? credit
  +int? levelId
  +dynamic roleUser
  +DateTime? createdAt
  +DateTime? lastLogin
  +dynamic fromRawJson()
  +String toRawJson()
  +dynamic fromJson()
  +Map<String, dynamic> toJson()
}

class "zspace::data::models::weapon_model.dart::WeaponModel" {
  +int? id
  +int? damage
  +int? attackSpeed
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +String toRawJson()
  +Map<String, dynamic> toJson()
}

"zspace::data::models::inventory_item_model.dart::InventoryItemModel" o-- "zspace::data::models::market_item_model.dart::MarketItemModel"
"zspace::data::models::market_item_model.dart::MarketItemModel" o-- "zspace::data::models::weapon_model.dart::WeaponModel"
"zspace::data::models::market_item_model.dart::MarketItemModel" o-- "zspace::data::models::energy_generator_model.dart::EnergyGeneratorModel"
"zspace::data::models::market_item_model.dart::MarketItemModel" o-- "zspace::data::models::shield_generator_model.dart::ShieldGeneratorModel"
"zspace::data::models::market_item_model.dart::MarketItemModel" o-- "zspace::data::models::ship_model.dart::ShipModel"
"zspace::data::models::market_item_model.dart::MarketItemModel" o-- "zspace::data::models::level_model.dart::LevelModel"


class "zspace::domain::entities::energy_generator.dart::EnergyGenerator" {
  +int? id
  +int? shipSpeed
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +List<Object?> props
}

class "zspace::domain::entities::inventory_item.dart::InventoryItem" {
  +int? id
  +int? itemId
  +int? userId
  +bool? isEquipped
  +DateTime? createdAt
  +DateTime? updatedAt
  +MarketItemModel? item
  +List<Object?> props
}

class "zspace::domain::entities::level.dart::Level" {
  +int? level
  +int? episodeId
  +List<Object?> props
}

class "zspace::domain::entities::market_item.dart::MarketItem" {
  +int? id
  +String? name
  +int? buyPrice
  +int? sellPrice
  +int? stock
  +bool? isActive
  +bool? isSalable
  +String? description
  +String? imageUrl
  +int? levelId
  +DateTime? createdAt
  +DateTime? updatedAt
  +String? category
  +Weapon? weapon
  +EnergyGenerator? energyGenerator
  +ShieldGenerator? shieldGenerator
  +Ship? ship
  +Level? level
  +List<Object?> props
}

class "zspace::domain::entities::shield_generator.dart::ShieldGenerator" {
  +int? id
  +int? shieldAmount
  +int? absorb
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +List<Object?> props
}

class "zspace::domain::entities::ship.dart::Ship" {
  +int? id
  +int? armor
  +int? speed
  +int? power
  +int? shield
  +int? attack
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +List<Object?> props
}

class "zspace::domain::entities::user.dart::User" {
  +int? id
  +String? userName
  +String? emailAddress
  +String? phoneNumber
  +int? credit
  +int? levelId
  +dynamic roleUser
  +DateTime? createdAt
  +DateTime? lastLogin
  +List<Object?> props
}

class "zspace::domain::entities::weapon.dart::Weapon" {
  +int? id
  +int? damage
  +int? attackSpeed
  +DateTime? createdAt
  +DateTime? updatedAt
  +int? itemId
  +List<Object?> props
}

"zspace::domain::entities::market_item.dart::MarketItem" <|-- "zspace::data::models::market_item_model.dart::MarketItemModel"
"zspace::domain::entities::inventory_item.dart::InventoryItem" <|-- "zspace::data::models::inventory_item_model.dart::InventoryItemModel"
"zspace::domain::entities::weapon.dart::Weapon" <|-- "zspace::data::models::weapon_model.dart::WeaponModel"
"zspace::domain::entities::energy_generator.dart::EnergyGenerator" <|-- "zspace::data::models::energy_generator_model.dart::EnergyGeneratorModel"
"zspace::domain::entities::shield_generator.dart::ShieldGenerator" <|-- "zspace::data::models::shield_generator_model.dart::ShieldGeneratorModel"
"zspace::domain::entities::ship.dart::Ship" <|-- "zspace::data::models::ship_model.dart::ShipModel"
"zspace::domain::entities::level.dart::Level"  <|-- "zspace::data::models::level_model.dart::LevelModel"
"zspace::domain::entities::user.dart::User"  <|-- "zspace::data::models::user_model.dart::UserModel"

"zspace::domain::entities::inventory_item.dart::InventoryItem" o-- "zspace::domain::entities::market_item.dart::MarketItem"
"zspace::domain::entities::market_item.dart::MarketItem" o-- "zspace::domain::entities::weapon.dart::Weapon"
"zspace::domain::entities::market_item.dart::MarketItem" o-- "zspace::domain::entities::energy_generator.dart::EnergyGenerator"
"zspace::domain::entities::market_item.dart::MarketItem" o-- "zspace::domain::entities::shield_generator.dart::ShieldGenerator"
"zspace::domain::entities::market_item.dart::MarketItem" o-- "zspace::domain::entities::ship.dart::Ship"
"zspace::domain::entities::market_item.dart::MarketItem" o-- "zspace::domain::entities::level.dart::Level"


abstract class "zspace::domain::repositories::data_repository.dart::DataRepository" {
  +Future<Either<Failure, User>> register()
  +Future<Either<Failure, User>> login()
  +Future<Either<Failure, User>> getProfile()
  +Future<Either<Failure, List<InventoryItem>>> getInventory()
  +Future<Either<Failure, List<InventoryItem>>> getEquippedInventory()
  +Future<Either<Failure, bool>> equipItem()
  +Future<Either<Failure, bool>> unEquipItem()
  +Future<Either<Failure, bool>> buyItem()
  +Future<Either<Failure, bool>> sellItem()
  +Future<Either<Failure, List<MarketItem>>> getMarketItems()
}

abstract class "zspace::domain::repositories::local_data_repository.dart::LocalDataRepository" {
  +Future<UserModel> getUser()
  +Future<void> saveUser()
  +Future<void> deleteUser()
  +Future<void> saveInventory()
  +Future<List<InventoryItemModel>> getInventory()
  +Future<void> saveEquippedInventory()
  +Future<List<InventoryItemModel>> getEquippedInventory()
  +Future<bool> equipItem()
  +Future<bool> unEquipItem()
  +Future<void> saveMarketItems()
  +Future<List<MarketItemModel>> getMarketItems()
}

abstract class "zspace::domain::repositories::remote_data_repository.dart::RemoteDataRepository" {
  +Future<UserModel> register()
  +Future<UserModel> login()
  +Future<UserModel> getProfile()
  +Future<List<InventoryItemModel>> getInventory()
  +Future<List<InventoryItemModel>> getEquippedInventory()
  +Future<bool> equipItem()
  +Future<bool> unEquipItem()
  +Future<bool> buyItem()
  +Future<bool> sellItem()
  +Future<List<MarketItemModel>> getMarketItems()
}


class "zspace::data::data_sources::http_data_source.dart::HttpDataSource" {
  +String baseUrl
  +Future<bool> buyItem()
  +Future<bool> equipItem()
  +Future<List<InventoryItemModel>> getEquippedInventory()
  +Future<List<InventoryItemModel>> getInventory()
  +Future<List<MarketItemModel>> getMarketItems()
  +Future<UserModel> getProfile()
  +Future<UserModel> login()
  +Future<UserModel> register()
  +Future<bool> sellItem()
  +Future<bool> unEquipItem()
}

"zspace::domain::repositories::remote_data_repository.dart::RemoteDataRepository" <|-- "zspace::data::data_sources::http_data_source.dart::HttpDataSource"

class "zspace::data::data_sources::local_json_data_source.dart::JsonLocalDataSource" {
  +Future<void> deleteUser()
  +Future<bool> equipItem()
  +Future<List<InventoryItemModel>> getEquippedInventory()
  +Future<List<InventoryItemModel>> getInventory()
  +Future<List<MarketItemModel>> getMarketItems()
  +Future<UserModel> getUser()
  +Future<void> saveEquippedInventory()
  +Future<void> saveInventory()
  +Future<void> saveMarketItems()
  +Future<void> saveUser()
  +Future<bool> unEquipItem()
}


class "zspace::data::provider::data_provider.dart::DataProvider" {
  +RemoteDataRepository remoteDataSource
  +LocalDataRepository localDataSource
  +NetworkInfo networkInfo
  -Future<Either<Failure, T>> _getDataList()
  +Future<Either<Failure, bool>> buyItem()
  +Future<Either<Failure, bool>> equipItem()
  +Future<Either<Failure, List<InventoryItem>>> getEquippedInventory()
  +Future<Either<Failure, List<InventoryItem>>> getInventory()
  +Future<Either<Failure, List<MarketItem>>> getMarketItems()
  +Future<Either<Failure, User>> getProfile()
  +Future<Either<Failure, User>> login()
  +Future<Either<Failure, User>> register()
  +Future<Either<Failure, bool>> sellItem()
  +Future<Either<Failure, bool>> unEquipItem()
}

"zspace::data::provider::data_provider.dart::DataProvider" o-- "zspace::domain::repositories::remote_data_repository.dart::RemoteDataRepository"
"zspace::data::provider::data_provider.dart::DataProvider" o-- "zspace::domain::repositories::local_data_repository.dart::LocalDataRepository"
"zspace::data::provider::data_provider.dart::DataProvider" o-- "zspace::core::platform::network_info.dart::NetworkInfo"
"zspace::domain::repositories::data_repository.dart::DataRepository" <|-- "zspace::data::provider::data_provider.dart::DataProvider"
"zspace::domain::repositories::local_data_repository.dart::LocalDataRepository" <|-- "zspace::data::data_sources::local_json_data_source.dart::JsonLocalDataSource"

"zspace::data::provider::data_provider.dart::DataProvider" o-- "zspace::core::errors::failure.dart::Failure"
"zspace::data::provider::data_provider.dart::DataProvider" o-- "dart::core::Exception"


"zspace::domain::repositories::data_repository.dart::DataRepository" o-- "zspace::domain::entities::user.dart::User"
"zspace::domain::repositories::data_repository.dart::DataRepository" o-- "zspace::domain::entities::inventory_item.dart::InventoryItem"
"zspace::domain::repositories::data_repository.dart::DataRepository" o-- "zspace::domain::entities::market_item.dart::MarketItem"


abstract class "package::get_it::get_it.dart" {
  +RemoteDataRepository remoteDataSource
  +LocalDataRepository localDataSource
  +NetworkInfo networkInfo
  +bool allowReassignment
  +Function()? onScopeChanged()
  +Future<T> getAsync()
  +T call<T extends Object>()
  +void registerFactory<T extends Object>()
  +void registerFactoryParam<T extends Object, P1, P2>()
  +void registerFactoryAsync<T extends Object>()
  +void registerFactoryParamAsync<T extends Object, P1, P2>()
  +void registerSingleton<T extends Object>()
  +void registerSingletonWithDependencies<T extends Object>()
  +void registerSingletonAsync<T extends Object>()
  +void registerLazySingleton<T extends Object>()
  +void registerLazySingletonAsync<T extends Object>()
  +bool isRegistered<T extends Object>()
  +Future<void> reset()
  +void pushNewScope()
  +FutureOr resetLazySingleton<T extends Object>()
  +FutureOr unregister<T extends Object>()
}


"package::get_it::get_it.dart" o-- "zspace::data::provider::data_provider.dart::DataProvider"
"package::get_it::get_it.dart" o-- "zspace::data::data_sources::local_json_data_source.dart::JsonLocalDataSource"
"package::get_it::get_it.dart" o-- "zspace::data::data_sources::http_data_source.dart::HttpDataSource"



class "zspace::objects::game_object.dart::GameObject" {
  +List<Vector2>? hitBox
  +Future<void> onLoad()
  +void update()
  +void render()
}

abstract class "zspace::objects::moveable::lasers::laser.dart::Laser" {
  +List<Vector2>? hitBox
  -double _speed
  -double _damage
  +dynamic getSpeed()
  +dynamic getDamage()
  +dynamic setSpeed()
  +dynamic setDamage()
}

abstract class "zspace::objects::moveable::rockets::rocket.dart::Rocket" {
  +List<Vector2>? hitBox
  -double _speed
  -double _damage
  +dynamic getSpeed()
  +dynamic getDamage()
  +dynamic setSpeed()
  +dynamic setDamage()
}

abstract class "zspace::objects::moveable::ships::ship.dart::Ship" {
  +List<Vector2>? hitBox
  -double _speed
  -double _armor
  -double _maxArmor
  -double _shield
  +dynamic getShield()
  +dynamic getArmor()
  +dynamic getMaxArmor()
  +dynamic getSpeed()
  +dynamic setShield()
  +dynamic setArmor()
  +dynamic setMaxArmor()
  +dynamic setSpeed()
}

class "zspace::objects::moveable::ships::user_ship.dart::UserShip" {
  +double maxSpeed
  +JoystickComponent joystick
  +Image image
  +Vector2 textureSize
  +int spriteAmount
  +double stepTime
  +List<Vector2>? hitBox
  +Future<void> onLoad()
  +void update()
  +void render()
}

abstract class "zspace::objects::unmoveable::explosion.dart::Explosion" {
  +List<Vector2>? hitBox
  -double _explosionMilliseconds
  -double _damage
  -double _explosionRadius
  +double explosionMilliseconds
  +double damage
  +double explosionRadius
}

abstract class "zspace::objects::unmoveable::meteor.dart::Meteor" {
  +List<Vector2>? hitBox
  -double _speed
  -double _damage
  -double _explosionRadius
  +double speed
  +double damage
  +double explosionRadius
}

abstract class "zspace::objects::unmoveable::station.dart::Station" {
  +List<Vector2>? hitBox
  -double _damage
  -double _shield
  +dynamic getDamage()
  +dynamic getShield()
  +dynamic setDamage()
  +dynamic setShield()
}

"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::moveable::lasers::laser.dart::Laser" 
"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::moveable::rockets::rocket.dart::Rocket"
"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::moveable::ships::ship.dart::Ship"
"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::moveable::ships::user_ship.dart::UserShip"
"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::unmoveable::explosion.dart::Explosion"
"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::unmoveable::meteor.dart::Meteor"
"zspace::objects::game_object.dart::GameObject" <|--  "zspace::objects::unmoveable::station.dart::Station"









class "zspace::presentation::screens::main_menu::main_menu_page.dart::MainMenuPage" {
  +Widget build()
  +Widget buildButton()
}

class "zspace::presentation::screens::main_menu::main_menu_viewmodel.dart::MainMenuViewModel" {
  +dynamic routeToEpisodesPage()
  +dynamic routeToSettingsPage()
  +dynamic routeToMarketPage()
  +dynamic routeToInventoryPage()
}


"zspace::presentation::screens::main_menu::main_menu_page.dart::MainMenuPage" o-- "zspace::presentation::screens::main_menu::main_menu_viewmodel.dart::MainMenuViewModel"
"zspace::presentation::screens::main_menu::main_menu_page.dart::MainMenuPage" o-- "zspace::core::utils::router::app_router.dart::AppRouter"
"zspace::presentation::screens::main_menu::main_menu_viewmodel.dart::MainMenuViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::main_menu::main_menu_viewmodel.dart::MainMenuViewModel" o-- "package::get_it::get_it.dart"

class "zspace::presentation::screens::settings::settings_page.dart::SettingsPage" {
  +Widget build()
  +Widget settingButton()
}

class "zspace::presentation::screens::settings::settings_viewmodel.dart::SettingsViewModel" {
  +dynamic changeLanguage()
  +dynamic changeSound()
}

"zspace::presentation::screens::settings::settings_page.dart::SettingsPage" o-- "zspace::presentation::screens::settings::settings_viewmodel.dart::SettingsViewModel"
"zspace::presentation::screens::settings::settings_viewmodel.dart::SettingsViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::settings::settings_viewmodel.dart::SettingsViewModel" o-- "package::get_it::get_it.dart"

class "zspace::presentation::screens::market::market_page.dart::MarketPage" {
  +Widget build()
  +Widget categoryButton()
  +Widget buildCategories()
  +Widget buildItems()
}

class "zspace::presentation::screens::market::market_page.dart::MarketViewModel" {
  +String category
  +List<MarketItemModel>? items
  +String getCategory
  +List<String> categories
  +void setCategory()
  +dynamic getItems()
  +dynamic getItem()
  +dynamic routeToItemDetailPage()
}

"zspace::presentation::screens::market::market_page.dart::MarketViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::market::market_page.dart::MarketPage" o-- "zspace::presentation::screens::market::market_page.dart::MarketViewModel"
"zspace::presentation::screens::market::market_page.dart::MarketViewModel" o-- "package::get_it::get_it.dart"

class "zspace::presentation::screens::level_information::level_information_page.dart::LevelInformationPage" {
  +Widget build()
  +Widget buildCreaturesOnLevel()
  +Widget buildStartButton()
}

class "zspace::presentation::screens::level_information::level_information_viewmodel.dart::LevelInformationViewModel" {
  +dynamic routeToGame()
}

"zspace::presentation::screens::level_information::level_information_viewmodel.dart::LevelInformationViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::level_information::level_information_page.dart::LevelInformationPage" o-- "zspace::presentation::screens::level_information::level_information_viewmodel.dart::LevelInformationViewModel"
"zspace::presentation::screens::level_information::level_information_viewmodel.dart::LevelInformationViewModel" o-- "package::get_it::get_it.dart"

class "zspace::presentation::screens::levels::levels_page.dart::LevelsPage" {
  +Widget build()
  +Widget buildLevels()
}

class "zspace::presentation::screens::levels::levels_viewmodel.dart::LevelsViewModel" {
  +dynamic routeToLevelInformationPage()
  +dynamic showError()
}

"zspace::presentation::screens::levels::levels_viewmodel.dart::LevelsViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::levels::levels_page.dart::LevelsPage" o-- "zspace::presentation::screens::levels::levels_viewmodel.dart::LevelsViewModel"

"zspace::presentation::screens::levels::levels_viewmodel.dart::LevelsViewModel" o-- "package::get_it::get_it.dart"

class "zspace::presentation::screens::item_detail::item_detail_page.dart::ItemDetailPage" {
  +Widget build()
  +Widget buildBuyButton()
  +Widget animationForPurchased()
  +Widget animationForFail()
}

class "zspace::presentation::screens::item_detail::item_detail_viewmodel.dart::ItemDetailViewModel" {
  +dynamic buyItem()
  +dynamic sellItem()
}

"zspace::presentation::screens::item_detail::item_detail_viewmodel.dart::ItemDetailViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::item_detail::item_detail_page.dart::ItemDetailPage" o-- "zspace::presentation::screens::item_detail::item_detail_viewmodel.dart::ItemDetailViewModel"

"zspace::presentation::screens::item_detail::item_detail_viewmodel.dart::ItemDetailViewModel"  o-- "package::get_it::get_it.dart"


class "zspace::presentation::screens::game::game_page.dart::GamePage" {
  +void onTapDown()
  +void onTapUp()
  +void onDragStart()
  +void onDragEnd()
  +void onDragCancel()
  +Future<void> onLoad()
}

class "zspace::presentation::screens::game::game_viewmodel.dart::GameViewModel" {
  +JoystickComponent joystick
  +Paint knobPaint
  +Paint backgroundPaint
  +UserShip player
  +List<GameObject> creatures
  +dynamic stopJoystick()
  +bool isGameFinish()
  +bool isPlayerAlive()
  +void routeToLevelInfoPage()
}

"zspace::presentation::screens::game::game_page.dart::GamePage" o-- "zspace::presentation::screens::game::game_viewmodel.dart::GameViewModel"
"zspace::presentation::screens::game::game_viewmodel.dart::GameViewModel" o-- "zspace::objects::moveable::ships::user_ship.dart::UserShip"
"zspace::presentation::screens::game::game_viewmodel.dart::GameViewModel" o-- "zspace::objects::game_object.dart::GameObject"
"zspace::presentation::screens::game::game_viewmodel.dart::GameViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::game::game_page.dart::GamePage" o-- "zspace::objects::joystick.dart::JoystickComponent"
"zspace::presentation::screens::game::game_viewmodel.dart::GameViewModel" o-- "package::get_it::get_it.dart"

class "zspace::presentation::screens::episodes::episodes_page.dart::EpisodesPage" {
  +EpisodesViewModel viewModel
  +Widget build()
  +Widget buildEpisodes()
}

class "zspace::presentation::screens::episodes::episodes_viewmodel.dart::EpisodesViewModel" {
  +dynamic routeToLevelPage()
  +dynamic showError()
}

"zspace::presentation::screens::episodes::episodes_viewmodel.dart::EpisodesViewModel" o-- "zspace::core::utils::router::app_navigator.dart::AppNavigator"
"zspace::presentation::screens::episodes::episodes_page.dart::EpisodesPage" o-- "zspace::presentation::screens::episodes::episodes_viewmodel.dart::EpisodesViewModel"



class "zspace::objects::joystick.dart::JoystickComponent" {
  +PositionComponent? knob
  +PositionComponent? background
  +double intensity
  +Vector2 delta
  -Vector2 _unscaledDelta
  +double knobRadius
  -Vector2 _baseKnobPosition
  {static} -double _eighthOfPi
  +Vector2 relativeDelta
  +JoystickDirection direction
  +void onMount()
  +void update()
  +bool onDragStart()
  +bool onDragUpdate()
  +bool onDragEnd()
  +bool onDragCancel()
}

class "zspace::objects::joystick.dart::JoystickDirection" {
  +int index
  {static} +List<JoystickDirection> values
  {static} +JoystickDirection up
  {static} +JoystickDirection upLeft
  {static} +JoystickDirection upRight
  {static} +JoystickDirection right
  {static} +JoystickDirection down
  {static} +JoystickDirection downRight
  {static} +JoystickDirection downLeft
  {static} +JoystickDirection left
  {static} +JoystickDirection idle
}

"zspace::objects::joystick.dart::JoystickComponent" o-- "zspace::objects::joystick.dart::JoystickDirection"


class "zspace::presentation::screens::inventory::inventory_page.dart::InventoryPage" {
  +State<InventoryPage> createState()
}

class "zspace::presentation::screens::inventory::inventory_page.dart::_InventoryPageState" {
  +List<SlideItem> inventoryItems
  +List<SlideItem> tempList
  +ValueNotifier<int?> selectingIndex
  +int? selectedIndex
  -ScrollController _scrollController
  +void initState()
  +Widget build()
  +Widget buildGreyBox()
  +Widget buildShipInventory()
  +Widget buildPlayerInventory()
  +Widget draggableItemBox()
  +Widget wrapWithDragTargetBoxBuilder()
  +Widget buildDraggedNewItemBox()
}

"zspace::presentation::screens::inventory::inventory_page.dart::_InventoryPageState" o-- "flutter::src::foundation::change_notifier.dart::ValueNotifier<int>"
"zspace::presentation::screens::inventory::inventory_page.dart::_InventoryPageState" o-- "flutter::src::widgets::scroll_controller.dart::ScrollController"

class "zspace::presentation::screens::inventory::inventory_page.dart::SlideItem" {
  +Color color
  +String text
  +int index
  +bool isDragging
  +InventoryItem? inventoryItem
}

"zspace::presentation::screens::inventory::inventory_page.dart::SlideItem" o-- "dart::ui::Color"
"zspace::presentation::screens::inventory::inventory_page.dart::SlideItem" o-- "zspace::domain::entities::inventory_item.dart::InventoryItem"


@enduml